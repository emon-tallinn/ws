version: '3.7'

volumes:
    prometheus_data: {}
    grafana_data: {}

networks:
  monitoring-net:

services:
  nginx:
    build:
      context: nginx/
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/sites-enabled/:/etc/nginx/sites-enabled
      - ./nginx/cache/:/etc/nginx/cache
      - /etc/ssl/:/etc/ssl
      - /var/log/nginx/:/var/log/nginx
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    ports:
      - 80:80
      - 443:443
    networks:
      - monitoring-net
    depends_on:
      - prometheus
      - grafana
    links:
      - prometheus
      - grafana
  certbot:
    container_name: certbot
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - monitoring-net


  duckdns:
    image: lscr.io/linuxserver/duckdns
    container_name: duckdns
    environment:
      - TZ=Europe/Tallinn
      - SUBDOMAINS=emon-tallinn
      # Token is loaded with .env file
      - TOKEN=${TOKEN:-NotSet}
    networks:
      - monitoring-net

  prometheus:
    image: prom/prometheus:v2.1.0
    container_name: prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
    links:
      - cadvisor
      - alertmanager
      - ws
    depends_on:
      - cadvisor
      - ws
    networks:
      - monitoring-net
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9090" ]
      interval: 30s
      timeout: 10s
      retries: 5

  node-exporter:
    image: prom/node-exporter
    container_name: node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command: 
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    networks:
      - monitoring-net
    restart: always

  alertmanager:
    image: prom/alertmanager
    container_name: alertmanager
    ports:
      - 9093:9093
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    networks:
      - monitoring-net
    restart: always
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8080:8080
    networks:
      - monitoring-net
    restart: always

  grafana:
    image: grafana/grafana
    container_name: grafana
    user: "472"
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-super}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_NAME=Emon
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    networks:
      - monitoring-net
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000" ]
      interval: 30s
      timeout: 10s
      retries: 5

  ws:
    build:
      context: ws/
    image: ws
    container_name: ws
    ports:
      - 9101:9101
    environment:
      - POLLING_INTERVAL_SECONDS=${POLLING_INTERVAL_SECONDS:-15}
      - EXPORTER_PORT=${EXPORTER_PORT:-9100}
      - EMHI_STATION=${EMHI_STATION:-Tallinn-Harku}
    networks:
      - monitoring-net
    restart: always